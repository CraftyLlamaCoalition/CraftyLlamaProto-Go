// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: CriaNotesService.proto

package craftyllamaprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriaNotesServiceClient is the client API for CriaNotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriaNotesServiceClient interface {
	AddNote(ctx context.Context, in *NewNoteRequest, opts ...grpc.CallOption) (*Status, error)
	DeleteNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*Status, error)
	GetNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*NoteContent, error)
	GetAllNotes(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultipleNotes, error)
}

type criaNotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriaNotesServiceClient(cc grpc.ClientConnInterface) CriaNotesServiceClient {
	return &criaNotesServiceClient{cc}
}

func (c *criaNotesServiceClient) AddNote(ctx context.Context, in *NewNoteRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/crianotes.CriaNotesService/AddNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criaNotesServiceClient) DeleteNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/crianotes.CriaNotesService/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criaNotesServiceClient) GetNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*NoteContent, error) {
	out := new(NoteContent)
	err := c.cc.Invoke(ctx, "/crianotes.CriaNotesService/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criaNotesServiceClient) GetAllNotes(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultipleNotes, error) {
	out := new(MultipleNotes)
	err := c.cc.Invoke(ctx, "/crianotes.CriaNotesService/GetAllNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriaNotesServiceServer is the server API for CriaNotesService service.
// All implementations must embed UnimplementedCriaNotesServiceServer
// for forward compatibility
type CriaNotesServiceServer interface {
	AddNote(context.Context, *NewNoteRequest) (*Status, error)
	DeleteNote(context.Context, *NoteRequest) (*Status, error)
	GetNote(context.Context, *NoteRequest) (*NoteContent, error)
	GetAllNotes(context.Context, *User) (*MultipleNotes, error)
	mustEmbedUnimplementedCriaNotesServiceServer()
}

// UnimplementedCriaNotesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCriaNotesServiceServer struct {
}

func (UnimplementedCriaNotesServiceServer) AddNote(context.Context, *NewNoteRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedCriaNotesServiceServer) DeleteNote(context.Context, *NoteRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedCriaNotesServiceServer) GetNote(context.Context, *NoteRequest) (*NoteContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedCriaNotesServiceServer) GetAllNotes(context.Context, *User) (*MultipleNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotes not implemented")
}
func (UnimplementedCriaNotesServiceServer) mustEmbedUnimplementedCriaNotesServiceServer() {}

// UnsafeCriaNotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriaNotesServiceServer will
// result in compilation errors.
type UnsafeCriaNotesServiceServer interface {
	mustEmbedUnimplementedCriaNotesServiceServer()
}

func RegisterCriaNotesServiceServer(s grpc.ServiceRegistrar, srv CriaNotesServiceServer) {
	s.RegisterService(&CriaNotesService_ServiceDesc, srv)
}

func _CriaNotesService_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriaNotesServiceServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crianotes.CriaNotesService/AddNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriaNotesServiceServer).AddNote(ctx, req.(*NewNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriaNotesService_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriaNotesServiceServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crianotes.CriaNotesService/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriaNotesServiceServer).DeleteNote(ctx, req.(*NoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriaNotesService_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriaNotesServiceServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crianotes.CriaNotesService/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriaNotesServiceServer).GetNote(ctx, req.(*NoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriaNotesService_GetAllNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriaNotesServiceServer).GetAllNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crianotes.CriaNotesService/GetAllNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriaNotesServiceServer).GetAllNotes(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// CriaNotesService_ServiceDesc is the grpc.ServiceDesc for CriaNotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriaNotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crianotes.CriaNotesService",
	HandlerType: (*CriaNotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNote",
			Handler:    _CriaNotesService_AddNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _CriaNotesService_DeleteNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _CriaNotesService_GetNote_Handler,
		},
		{
			MethodName: "GetAllNotes",
			Handler:    _CriaNotesService_GetAllNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CriaNotesService.proto",
}
